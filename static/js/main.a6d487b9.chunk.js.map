{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/loader.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","type","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","geometries","coordinates","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","gif","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAWeA,EARQ,SAAC,GAAwB,EAAvBC,IAAuB,EAAlBC,IAAmB,IAAdC,EAAa,EAAbA,QAC/B,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCSjCG,EAdS,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACtB,OACI,sBAAKJ,UAAU,gBAAf,UACI,gDACA,+BACI,sCAAQ,iCAASI,EAAKC,QACtB,yCAAW,iCAASD,EAAKE,WACzB,wCAAU,iCAASF,EAAKG,iBCAlCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACDC,mBAAS,MADR,mBAClCC,EADkC,KACpBC,EADoB,KAGnCC,EAAUN,EAAUO,KAAI,SAACC,EAAIC,GAC/B,OAA2B,IAAxBD,EAAGE,WAAW,GAAGd,GACT,cAAC,EAAD,CAEPR,IAAKoB,EAAGG,WAAW,GAAGC,YAAY,GAClCvB,IAAKmB,EAAGG,WAAW,GAAGC,YAAY,GAClCtB,QAAS,kBAAMe,EAAgB,CAACT,GAAIY,EAAGZ,GACnCC,MAAOW,EAAGX,MAAOC,KAAMU,EAAGE,WAAW,GAAGb,UAJvCY,GAMF,QAIX,OACI,sBAAKlB,UAAU,MAAf,UACI,cAAC,IAAD,CACAsB,iBAAkB,CAACC,IAtBfC,2CAuBJC,cAAgBf,EAChBgB,YAAcf,EAHd,SAKCI,IAEAF,GAAgB,cAAC,EAAD,CAAiBT,KAAMS,QAMpDL,EAAImB,aAAe,CACfjB,OAAQ,CACJb,IAAK,QACLC,KAAM,UAEVa,KAAM,GAGKH,QC/CA,MAA0B,mCCW1BoB,EATA,WACX,OACI,sBAAK5B,UAAU,SAAf,UACI,qBAAK6B,IAAKC,EAAKC,IAAI,eACnB,mDCMGC,EARA,WACX,OACI,wBAAQhC,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,4CCyBG+B,MA1Bf,WAAgB,IAAD,EACqBrB,mBAAS,IAD9B,mBACNH,EADM,KACKyB,EADL,OAEiBtB,oBAAS,GAF1B,mBAENuB,EAFM,KAEGC,EAFH,KAkBb,OAdAC,qBAAU,YACW,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGKA,EAAIC,OAHT,gBAGXC,EAHW,EAGXA,OAEPR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KAEA,IAGF,gCACE,cAAC,EAAD,IACCR,EAAyC,cAAC,EAAD,IAA/B,cAAC,EAAD,CAAK1B,UAAWA,QCflBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6d487b9.chunk.js","sourcesContent":["import {Icon} from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\n\nconst LocationMarker = ({lat, lng, onClick}) => {\n    return (\n        <div className=\"location-marker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"location-icon\" />\n        </div>\n    )\n}\n\nexport default LocationMarker\n","\nconst LocationInfoBox = ({info}) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location</h2>\n            <ul>\n                <li>ID: <strong>{info.id}</strong></li>\n                <li>Title: <strong>{info.title}</strong></li>\n                <li>Type: <strong>{info.type}</strong></li>\n                \n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","import { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport LocationMarker from './LocationMarker'\nimport LocationInfoBox from './LocationInfoBox'\n\nconst API_KEY = process.env.REACT_APP_KEY;\n\n\nconst Map = ({ eventData, center, zoom }) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n\n    const markers = eventData.map((ev, index) => {\n        if(ev.categories[0].id === 8){\n            return <LocationMarker\n            key={index}\n            lat={ev.geometries[0].coordinates[1]} \n            lng={ev.geometries[0].coordinates[0]}\n            onClick={() => setLocationInfo({id: ev.id,\n                title: ev.title, type: ev.categories[0].title})}/>\n            } \n        return null\n    })\n    \n    \n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n            bootstrapURLKeys={{key: API_KEY}}\n            defaultCenter={ center }\n            defaultZoom={ zoom }\n            > \n            {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\n\n        </div>\n    )\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 42.3265,\n        lng: -122.8756\n    },\n    zoom: 6\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/loader.c1bbf54d.gif\";","import gif from './loader.gif'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={gif} alt=\"gif-loader\" />\n            <h1>Fetching Data</h1>\n        </div>\n    )\n}\n\nexport default Loader\n","import {Icon} from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\n\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1><Icon icon={locationIcon} /> Wildfire Tracker (Powered By NASA)</h1>            \n        </header>\n    )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Map from './components/Map'\nimport Loader from './components/Loader'\nimport Header from './components/Header'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n      const fetchEvents = async () => {\n        setLoading(true)\n        const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n        const {events} = await res.json()\n\n        setEventData(events)\n        setLoading(false)\n      }\n\n      fetchEvents()\n      \n    },[])\n\n  return (\n    <div>\n      <Header />\n    { !loading ? <Map eventData={eventData}/> : <Loader/>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}